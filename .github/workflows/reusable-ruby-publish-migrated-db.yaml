name: Reusable Ruby publish migrated DB

on:
  workflow_call:
    inputs:
      workingDirectory:
        description: Working direction for action
        default: ./
        type: string
        required: false
      rubyVersion:
        description: Ruby version to use
        default: '2.7.5'
        type: string
        required: false
      nodeVersion:
        description: Node version to use
        default: '20'
        type: string
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workingDirectory }}

    steps:
      - name: Start postgres Docker
        run: |
          sudo systemctl stop postgresql.service
          docker run -d --name postgres \
          -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e PGDATA=/data \
          -p 5432:5432 postgres:alpine;
          until docker exec postgres pg_isready -U postgres; do
            sleep 1
          done

      - name: Start postgres
        run: |
          docker exec postgres psql -U postgres -c "CREATE USER rails WITH SUPERUSER PASSWORD 'rails';"
          docker exec postgres psql -U postgres -c "CREATE USER rees46 WITH SUPERUSER PASSWORD 'rees46';"
          docker exec postgres rm -rf /docker-entrypoint-initdb.d/*

      - name: Checkout
        uses: actions/checkout@v4

      - name: Start clickhouse server
        run: |
          docker run -d \
          --name clickhouse_server \
          -p 8123:8123 \
          -p 9000:9000 \
          -p 9009:9009 \
          -p 9004:9004 \
          -p 9005:9005 \
          --ulimit nofile=262144:262144 \
          yandex/clickhouse-server:22-alpine;
          docker cp ./config/clickhouse-config.xml clickhouse_server:/etc/clickhouse-server/config.xml

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.rubyVersion }}
          bundler-cache: true

      - name: Yarn install
        run: yarn install --inline-builds

      - name: Prepare configs
        run: |
          mv ./config/database.yml.example ./config/database.yml
          mv ./config/secrets.yml.example ./config/secrets.yml

      - name: Change configs
        run: |
          file="./config/database.yml"
          awk '
          {
            gsub(/<<: \*default_clickhouse_pg/, "<<: *default_clickhouse")

            if ($0 ~ /default_clickhouse:/) {
              in_default_clickhouse = 1
            }
            if ($0 ~ /development_clickhouse:/) {
              in_development_clickhouse = 1
            }
            if (in_development_clickhouse && $0 ~ /<<: \*default_clickhouse_pg/) {
              $0 = "  <<: *default_clickhouse"
              in_development_clickhouse = 0
            }

            print
          }' "$file" > tmp && mv tmp "$file"
          echo "$(cat $file)"

      - name: Run clickhouse migrations
        run: |
          bundle exec rake clickhouse:create
          bundle exec rake clickhouse:schema:load
          docker exec clickhouse_server clickhouse-client --query="rename database rees46 to rees46_test"
          bundle exec rake clickhouse:create
          bundle exec rake clickhouse:schema:load
          docker exec clickhouse_server clickhouse-client --query="show databases"
          docker exec clickhouse_server clickhouse-client --query="show tables from rees46_test"
          docker exec clickhouse_server clickhouse-client --query="show tables from rees46"

      - name: Publish clickhouse server docker image
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker exec clickhouse_server cp -r /var/lib/clickhouse/. /data/
          docker exec clickhouse_server sed -i 's|<path>/var/lib/clickhouse</path>|<path>/data</path>|g' /etc/clickhouse-server/config.xml
          docker stop clickhouse_server
          echo $GITHUB_TOKEN | docker login ghcr.io -u $REPOSITORY_OWNER --password-stdin
          docker commit clickhouse_server ghcr.io/rees46/clickhouse-server-migrated:latest
          docker push ghcr.io/rees46/clickhouse-server-migrated:latest

      - name: Run postgres migrations test
        env:
          PG_PASSWORD: rees46
          PG_USER: rees46
          RAILS_ENV: test
        run: |
          bundle exec rake db:create
          bundle exec rake db:schema:load

      - name: Run postgres migrations development
        env:
          PG_PASSWORD: rees46
          PG_USER: rees46
          RAILS_ENV: development
        run: |
          bundle exec rake db:create
          bundle exec rake db:schema:load

      - name: Publish postgres docker image
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker exec postgres psql -U postgres -c "SELECT datname FROM pg_database WHERE datistemplate = false;"

          echo $(docker exec postgres psql -U rees46 -W rees46 -d rees46_test -c "\dt;")
          echo $GITHUB_TOKEN | docker login ghcr.io -u $REPOSITORY_OWNER --password-stdin
          docker commit postgres ghcr.io/rees46/postgres-migrated:latest
          docker push ghcr.io/rees46/postgres-migrated:latest
