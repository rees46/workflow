name: Sync Repositories

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node version to run this workflow. Default: 18 as it is in action cache'
        default: '18'
        required: false
        type: string
      changeLookUpPath:
        description: 'Specify the folder to look for changes and publish'
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  run:
    name: Synchronization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
        env:
          GITHUB_TOKEN: ${{ secrets.token }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Check for changed files
        id: changed_files
        uses: tj-actions/changed-files@v42

      - name: Determine if changes are in the specified path
        run: |
          echo "path_changes=$(echo '${{ steps.changed_files.outputs.all_changed_files }}' | grep -c '${{ inputs.changeLookUpPath }}')" >> $GITHUB_ENV

      - name: Get last merged PR author login
        run: |
          PR_NUMBER=$(gh pr list --state merged --limit 1 --json number --jq '.[0].number')
          LAST_PR_AUTHOR=$(gh pr view $PR_NUMBER --json author --jq '.author.login')
          echo "LAST_PR_AUTHOR=$LAST_PR_AUTHOR" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out remote repository if changes
        if: env.path_changes != '0'
        uses: actions/checkout@v4
        with:
          repository: PersonaClick/rn-sdk
          token: ${{ secrets.token }}
          path: repo2

      - name: Sync files to remote repository if changes
        if: env.path_changes != '0'
        run: |
          rsync -av --progress \
            ${{ inputs.changeLookUpPath }}/ repo2/ \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'README.md' \

      - name: Apply changes to package.json
        if: env.path_changes != '0'
        working-directory: repo2
        run: |
          find . -type f -name 'package.json' -exec sed -i \
            -e 's|rees46/react-native|personaclick/rn|g' \
            -e 's|Rees46/react-native|PersonaClick/rn|g' \
            -e 's/Rees46/PersonaClick/g' {} +

      - name: Apply changes to JavaScript files
        if: env.path_changes != '0'
        working-directory: repo2
        run: |
          find . -type f \( -name '*.js' \) -exec sed -i \
            -e 's|https://api.rees46.ru/|https://api.personaclick.com/|g' \
            -e 's/rees46/personaClick/g' \
            -e 's/Rees46/PersonaClick/g' {} +

      - name: Apply changes to CHANGELOG.md
        if: env.path_changes != '0'
        working-directory: repo2
        run: |
          find . -type f -name 'CHANGELOG.md' -exec sed -i 's|\[\([^]]*\)\]\(([^)]*)\)|\1|g' {} +

      - name: Create commit
        if: env.path_changes != '0'
        working-directory: repo2
        run: |
          git config --global user.name Jade Smith 
          git config --global user.email github-bot@rees46.com
          git add .
          echo "Changes to be committed:"
          git diff --staged
          git commit -m "feat: release"
        env:
          GITHUB_TOKEN: ${{ secrets.token }}

      - name: Set branch name
        if: env.path_changes != '0'
        run: echo "BRANCH_NAME=feat/new-release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Checkout new branch and push
        if: env.path_changes != '0'
        working-directory: repo2
        run: |
          git checkout -b ${{ env.BRANCH_NAME }}
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.token }}

      - name: Create Pull Request
        if: env.path_changes != '0'
        working-directory: repo2
        run: |
          PR_TITLE="Automated release"
          PR_BODY="This is an automated pull request to update from branch $BRANCH_NAME"
          echo "ASSIGNEES: $LAST_PR_AUTHOR"
          gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base master --head $BRANCH_NAME --assignee $MANAGER
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          LAST_PR_AUTHOR: ${{ env.LAST_PR_AUTHOR }}
          MANAGER: TorinAsakura
