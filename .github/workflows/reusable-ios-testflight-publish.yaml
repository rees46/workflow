name: Reusable iOS TestFlight Publish

env:
  WORKFLOW_REPO: "rees46/workflow"
  ARCHIVE_EXPORT_PATH: "./build/exported-app"
  EXPORT_OPTIONS_PLIST_PATH: "./ExportOptions.plist"
  PROPERTIES_FILE: "version.properties"

on:
  workflow_call:
    inputs:
      xcworkspace:
        required: true
        type: string
      scheme:
        required: true
        type: string
      codeSignIdentity:
        required: true
        type: string
      developmentTeam:
        required: true
        type: string
      provisioningProfileSpecifier:
        required: true
        type: string
    secrets:
      GITHUB_APP_ID:
        required: true
      GITHUB_APP_PRIVATE_KEY:
        required: true
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true
        description: base64 string
      IOS_CERTIFICATE_P12:
        required: true
        description: base64 string
      IOS_CERTIFICATE_PASSWORD:
        required: true
      IOS_PROVISIONING_PROFILE:
        required: true
        description: base64 string

jobs:
  publish_and_version_bump:
    runs-on: macos-latest

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.GITHUB_APP_ID }}
          private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout Workflow Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.WORKFLOW_REPO }}
          path: workflow
          sparse-checkout: |
            scripts/version-properties

      - name: Increment vesion manually
        run: |
          ./workflow/scripts/version-properties/increment-patch-version.sh
          VERSION=$(./workflow/scripts/version-properties/get-version-code.sh)
          agvtool new-version -all $VERSION

      - name: Install the Apple certificate & provisioning profile & P8
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        run: |
          # prepare dirs
          mkdir -p private_keys

          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          AUTH_KEY_PATH="private_keys/AuthKey_${APP_STORE_CONNECT_API_KEY_ID}.p8"

          # apply auth key
          echo -n "$APP_STORE_CONNECT_API_KEY" | base64 --decode -o $AUTH_KEY_PATH

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Pod install
        run: |
          pod install

      - name: Build and Archive
        env:
          API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          ARCHIVE_PATH=$PWD/build/demo-store-ios.xcarchive

          xcrun xcodebuild \
            -workspace "${{ inputs.xcworkspace }}" \
            -scheme "${{ inputs.scheme }}" \
            -configuration AppStoreDistribution \
            -sdk iphoneos \
            -parallelizeTargets \
            -showBuildTimingSummary \
            -disableAutomaticPackageResolution \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="${{ inputs.codeSignIdentity }}" \
            DEVELOPMENT_TEAM="${{ inputs.developmentTeam }}" \
            PROVISIONING_PROFILE_SPECIFIER="${{ inputs.provisioningProfileSpecifier }}" \
            OTHER_CODE_SIGN_FLAGS="--deep"

          xcrun xcodebuild \
            -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "${{ env.EXPORT_OPTIONS_PLIST_PATH }}" \
            -exportPath "${{ env.ARCHIVE_EXPORT_PATH }}" \

      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@master
        with:
          app-path: "${{ env.ARCHIVE_EXPORT_PATH }}/${{ inputs.scheme }}.ipa"
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      # Retrieve new version
      - name: Retrieve new version
        id: versionName
        run: |
          version=$(./workflow/scripts/version-properties/get-version-name.sh)
          echo "versionName=$version" >> $GITHUB_ENV
          echo "versionName=$version" >> $GITHUB_OUTPUT

      # Commit version changes
      - name: Commit version changes
        id: committer
        uses: planetscale/ghcommit-action@v0.1.6
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          repo: ${{ github.repository }}
          branch: master
          commit_message: "chore: bump version to ${{ steps.versionName.outputs.versionName }}"
          file_pattern: ${{ env.PROPERTIES_FILE }}
