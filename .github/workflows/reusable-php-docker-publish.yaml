name: Reusable PHP docker publish

on:
  workflow_call:
    inputs:
      branch:
        description: "Git branch name"
        required: true
        type: string

jobs:
  run:
    name: Publish PHP docker images
    runs-on: ubuntu-latest

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Set tags
        id: tags
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "commitSha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "date=$(date +%s)" >> "$GITHUB_OUTPUT"

          case "${BRANCH_NAME}" in
            *master)   TAG_PREFIX="";       TAG_SUFFIX="latest" ;;
            *stage)  TAG_PREFIX="stage-"; TAG_SUFFIX="stage"  ;;
            *) echo "‚ùå Unsupported branch: ${BRANCH_NAME}" >&2; exit 1 ;;
          esac

          echo "tagPrefix=$TAG_PREFIX" >> "$GITHUB_OUTPUT"
          echo "tagSuffix=$TAG_SUFFIX" >> "$GITHUB_OUTPUT"

      - uses: docker/setup-buildx-action@v3

      - name: Build and push core image
        uses: docker/build-push-action@v6
        with:
          file: packages/core/Dockerfile
          push: true
          tags: |
            ghcr.io/rees46/core:${{ steps.tags.outputs.tagSuffix }}
            ghcr.io/rees46/core:${{ steps.tags.outputs.tagPrefix }}${{ steps.tags.outputs.commitSha }}-${{ steps.tags.outputs.date }}
          cache-from: type=gha,scope=core
          cache-to: type=gha,mode=max,scope=core

      - name: Build and Push Docker images
        env:
          REPOSITORY_OWNER: ${{ github.repository_owner }}
          SOURCE_PATH: packages
        run: |
          MATCHED_FILES=$(find $SOURCE_PATH -name "Dockerfile")

          echo "Trying to build packages: $MATCHED_FILES"

          for package in $MATCHED_FILES; do

            package_dir=$(dirname "$package")
            PACKAGE_NAME=$(basename "$package_dir")

            if [ "$PACKAGE_NAME" = "core" ]; then
              echo "‚è≠Ô∏è  Skipping build for core package"
              continue
            fi

            IMAGE_NAME=ghcr.io/$REPOSITORY_OWNER/$PACKAGE_NAME:${{ steps.tags.outputs.tagPrefix }}$(git rev-parse --short HEAD)-$(date +%s)
            IMAGE_NAME_LATEST=ghcr.io/$REPOSITORY_OWNER/$PACKAGE_NAME:${{ steps.tags.outputs.tagSuffix }}

            echo "üì¶  ${IMAGE_NAME} ‚Üí ${IMAGE_NAME_LATEST}"
            docker buildx build . \
              --file "${package}" \
              --tag "${IMAGE_NAME}" \
              --tag "${IMAGE_NAME_LATEST}" \
              --cache-from type=gha,scope="${PACKAGE_NAME}" \
              --cache-to type=gha,scope="${PACKAGE_NAME}" \
              --push \
              --progress plain \

            echo "‚úÖ  pushed ${IMAGE_NAME} + ${IMAGE_NAME_LATEST}"
          done
