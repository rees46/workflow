name: Reusable docker publish

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node version to run this workflow. Default: 18 as it is in action cache'
        default: '18'
        required: false
        type: string
      changeLookUpPath:
        description: 'Which folder to look for changes and publish'
        default: ''
        required: false
        type: string
      branch:
        description: 'Git branch name'
        required: true
        type: string

jobs:
  run:
    name: Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Changed files
        id: changed_files
        uses: tj-actions/changed-files@v46

      - name: Check if any packages need build
        id: changed_packages
        run: |
          echo "packages=$(echo "${{ steps.changed_files.outputs.all_changed_files }}" | tr ' ' '\n' | grep 'packages/' | awk -F'/' '{print $2}' | uniq | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Build and Push Docker images
        env:
          CHANGED_FILES: ${{ steps.changed_files.outputs.all_changed_files }}
          CHANGED_PACKAGES: ${{ steps.changed_packages.outputs.packages }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_OWNER: ${{ github.repository_owner }}
        if: steps.changed_packages.outputs.packages != ''
        run: |
          echo $GITHUB_TOKEN | docker login ghcr.io -u $REPOSITORY_OWNER --password-stdin

          echo "Trying to build packages: $CHANGED_PACKAGES"

          read -ra packages_array <<< "$CHANGED_PACKAGES"

          for package in "${packages_array[@]}"
          do
            echo "🏗🏗🏗️  Building $package..."
            if [ -f "./packages/$package/Dockerfile" ]; then
              echo "🔎🔎🔎  Found Dockerfile for $package"
              branch_name=${{ inputs.branch }}
              if [ "$branch_name" = "master" ]; then
                tag_prefix=""
                tag_suffix="latest"
              elif [ "$branch_name" = "stage" ]; then
                tag_prefix="stage-"
                tag_suffix="stage"
              else
                echo "❌ Unsupported branch: $branch_name" && exit 1
              fi

              image_name=ghcr.io/$REPOSITORY_OWNER/$package:${tag_prefix}$(git rev-parse --short HEAD)-$(date +%s)
              image_name_latest=ghcr.io/$REPOSITORY_OWNER/$package:$tag_suffix

              docker build . -f packages/$package/Dockerfile -t $image_name -t $image_name_latest --quiet
              docker push $image_name --quiet
              echo "✅✅✅ Pushed successfully $image_name"
              docker push $image_name_latest --quiet
              echo "✅✅✅ Pushed successfully $image_name_latest"
            else
              echo "❎❎❎  No Dockerfile for $package found, skipping"
            fi
          done
