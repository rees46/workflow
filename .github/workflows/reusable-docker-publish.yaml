name: Reusable docker publish

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node version to run this workflow. Default: 18.19 as it is in action cache'
        default: '18.19'
        required: false
        type: string
      changeLookUpPath:
        description: 'Which folder to look for changes and publish'
        default: ''
        required: false
        type: string

jobs:
  run:
    name: Publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Find Base Commit for master
        id: find_base_commit
        run: |
          echo "Finding base commit between HEAD and origin/master"
          echo "base_commit=$(git log --merges -n 2 --format=format:%H | tail -n 1)" >> "$GITHUB_OUTPUT"
          echo "Base Commit: $base_commit"

      - name: Find latest merge commit for master
        id: find_last_commit
        run: |
          echo "Finding base commit between HEAD and origin/master"
          echo "last_commit=$(git log --merges -n 1 --format=format:%H)" >> "$GITHUB_OUTPUT"
          echo "Last Commit: $last_commit"

      - name: Get changed packages
        env:
          BASE_COMMIT: ${{ steps.find_base_commit.outputs.base_commit }}
          LAST_COMMIT: ${{ steps.find_last_commit.outputs.last_commit }}
        id: changed_packages
        run: |
          echo "packages=$(git diff --name-only $LAST_COMMIT $BASE_COMMIT | grep '${{ inputs.changeLookUpPath }}/' | awk 'BEGIN {FS="/"} {print $2}' | uniq)" >> "$GITHUB_OUTPUT"
          echo "Detected changes: packages"

      - name: Build and Push Docker images
        env:
          PACKAGES: ${{ steps.changed_packages.outputs.packages }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: $PACKAGES != ''
        run: |
          echo "Trying to build $PACKAGES"
          for package in $PACKAGES
          do
            echo "$package"
            if [ -f "./docker/$package.yml" ]; then
              echo "Building package: $package"
              docker compose -f ./docker/$package.yml build -t ghcr.io/${{ github.repository }}/package-$package:latest ./packages/$package
              echo $GITHUB_TOKEN | docker login ghcr.io -u ${{ github.actor }} --password-stdin
              docker push ghcr.io/${{ github.repository }}/package-$package:latest
            fi
          done
