name: PersonaClick Synchronization

env:
  TERGET_REPO: "PersonaClick/workflow"
  MANAGER_USERNAME: TorinAsakura
  SYNC_IGNORE: ".git,.idea,.gitignore,LICENSE,.github/workflows/synchronization.yaml"
  REPLACMENT_EXTENTIONS: "*.ts,*.sh,*.yaml"
  REPLACEMENT_CONTENTS: "https://api.rees46.com/|https://api.personaclick.com/,com.rees46:rees46-sdk|com.personaclick:personaclick-sdk,api.rees46.com|api.personaclick.com,rees46.com|personaclick.com,rees46|personaClick,REES46|PersonaClick,Rees46|PersonaClick"

on:
  # TODO uncomment
  pull_request:
  # pull_request:
  #   types:
  #     - closed
  #   branches:
  #     - master
  # workflow_dispatch:

jobs:
  run:
    # TODO uncomment
    # if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: source
        env:
          GITHUB_TOKEN: ${{ secrets.JADE_SMITH_BOT_TOKEN }}

      - name: Check out remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TERGET_REPO }}
          token: ${{ secrets.JADE_SMITH_BOT_TOKEN }}
          path: target

      - name: Clean target directory except excluded files
        working-directory: target
        run: |
          IFS=',' read -r -a ignored_files <<< "$SYNC_IGNORE"

          exclude_conditions=""
          for ignored_file in "${ignored_files[@]}"; do
            exclude_conditions=" $exclude_conditions ! -name \"$ignored_file\""
          done

          eval find . -mindepth 1 -maxdepth 1 $exclude_conditions -exec rm -rf {} +

      # TODO need to separete .github/workflows/synchronization.yaml into personal directory
      - name: Sync files to remote repository
        run: |
          IFS=',' read -r -a ignored_files <<< "$SYNC_IGNORE"

          exclude_conditions=""
          for ignored_file in "${ignored_files[@]}"; do
            exclude_conditions=" $exclude_conditions --exclude \"$ignored_file\""
          done

          echo $exclude_conditions

          eval rsync -av --progress source/ target/ $exclude_conditions

      - name: Apply changes to files
        working-directory: target
        run: |
          IFS=',' read -r -a replacement_extentions <<< "$REPLACMENT_EXTENTIONS"
          IFS=',' read -r -a replacement_contents <<< "$REPLACEMENT_CONTENTS"

          find_conditions=""
          for extention in "${replacement_extentions[@]}"; do
            if [ -z "$find_conditions" ]; then
              find_conditions="-name \"$extention\""
            else
              find_conditions="$find_conditions -o -name \"$extention\""
            fi
          done

          sed_arguments=""
          for replacement_content in "${replacement_contents[@]}"; do
            sed_arguments+="-e 's|$replacement_content|g' "
          done

          eval "find . -type f \( $find_conditions \) -exec sed -i $sed_arguments" {} +

      - name: Get last merged PR author login
        working-directory: source
        id: pr_author
        run: |
          PR_NUMBER=$(gh pr list --state merged --limit 1 --json number --jq '.[0].number')
          LAST_PR_AUTHOR=$(gh pr view $PR_NUMBER --json author --jq '.author.login')
          echo "LAST_PR_AUTHOR=$LAST_PR_AUTHOR" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create commit
        working-directory: target
        run: |
          git config --global user.name Jade Smith
          git config --global user.email github-bot@rees46.com
          git add .
          echo "Changes to be committed:"
          git diff --staged
          git commit -m "feat: release"
        env:
          GITHUB_TOKEN: ${{ secrets.JADE_SMITH_BOT_TOKEN }}

      - name: Set branch name
        id: branch_name
        run: echo "BRANCH_NAME=feat/new-release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Checkout new branch and push
        working-directory: target
        run: |
          git checkout -b $BRANCH_NAME
          git push --set-upstream origin $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.JADE_SMITH_BOT_TOKEN }}
          BRANCH_NAME: ${{ steps.branch_name.outputs.BRANCH_NAME }}

      - name: Create Pull Request
        working-directory: target
        run: |
          PR_TITLE="Automated release"
          PR_BODY="This is an automated pull request to update from branch $BRANCH_NAME"
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef -q ".defaultBranchRef.name")
          echo "Assigning PR to LAST_PR_AUTHOR: $LAST_PR_AUTHOR"
          echo "Adding MANAGER: $MANAGER as a reviewer"
          gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base "$DEFAULT_BRANCH" --head $BRANCH_NAME --assignee $LAST_PR_AUTHOR --reviewer $MANAGER
        env:
          GITHUB_TOKEN: ${{ secrets.JADE_SMITH_BOT_TOKEN }}
          BRANCH_NAME: ${{ steps.branch_name.outputs.BRANCH_NAME }}
          LAST_PR_AUTHOR: ${{ steps.pr_author.outputs.LAST_PR_AUTHOR }}
          MANAGER: ${{ env.MANAGER_USERNAME }}
