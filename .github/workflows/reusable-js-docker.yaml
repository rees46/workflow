name: Reusable JS/TS Docker

on:
  workflow_call:
    inputs:
      branch:
        description: Working branch
        default: master
        required: false
        type: string
      nodeVersion:
        description: Node version to run this workflow. Default 20 as it is in action cache
        default: '20'
        required: false
        type: string
      workingDirectory:
        description: Where the script should execute
        type: string
        required: false
        default: ./

jobs:
  run:
    name: Release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.workingDirectory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.nodeVersion }}

      - name: Install
        run: yarn install --inline-builds

      - name: Find Base Commit
        env:
          BRANCH: ${{ inputs.branch }}
        id: find_base_commit
        run: |
          echo "Finding base commit between HEAD and origin/$BRANCH"
          BASE_COMMIT=$(git log --merges -n 2 --format=format:%H | tail -n 1)
          echo "baseCommit=$BASE_COMMIT" >> $GITHUB_OUTPUT
          echo "Base Commit: $BASE_COMMIT"

      - name: List changed workspaces
        env:
          BASE_COMMIT: ${{ steps.find_base_commit.outputs.baseCommit }}
        run: yarn workspaces list --since=$BASE_COMMIT^

      - name: Build Docker and publish
        env:
          BASE_COMMIT: ${{ steps.find_base_commit.outputs.baseCommit }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          yarn workspaces foreach --since=$BASE_COMMIT^ exec \
          'bash -c "image_name=ghcr.io/$REPOSITORY_OWNER/$npm_package_name:$(git rev-parse --short HEAD)-$(date +%s) && \
          image_name_latest=ghcr.io/$REPOSITORY_OWNER/$PACKAGE:latest && \
          docker build . -t $image_name_latest -t $image_name --quiet && \
          docker push $image_name && \
          docker push $image_name_latest"'
