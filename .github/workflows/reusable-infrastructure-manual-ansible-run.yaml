name: Reusable Ansible playbook run

on:
  workflow_call:
    inputs:
      PLAYBOOK_NAME:
        required: true
        type: string
      FOLDER:
        required: true
        type: string
      PLAYBOOKS_PATH:
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      VPN_CONFIG:
        required: false

jobs:
  dry-run:
    name: Ansible run
    runs-on: ubuntu-latest

    steps:
      - name: Validate FOLDER input
        run: |
          ALLOWED_FOLDERS=("synchronize" "kari")

          if [[ ! " ${ALLOWED_FOLDERS[@]} " =~ " ${{ inputs.FOLDER }} " ]]; then
            echo "Invalid FOLDER: ${{ inputs.FOLDER }}. Allowed values are: ${ALLOWED_FOLDERS[*]}"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ansible
        uses: alex-oleshkevich/setup-ansible@v1.0.1
        with:
          version: '11'

      - name: Set up ssh
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/id_rsa

      - name: Check if VPN_CONFIG is provided
        id: check_vpn_config
        run: |
          if [ -z "${{ secrets.VPN_CONFIG }}" ]; then
            echo "VPN_CONFIG secret is not provided."
            echo "vpn_config_provided=false" >> $GITHUB_ENV
          else
            echo "VPN_CONFIG secret is provided."
            echo "vpn_config_provided=true" >> $GITHUB_ENV
          fi

      - name: Connect to VPN
        if: env.vpn_config_provided == 'true'
        run: |
          sudo apt update -y
          sudo apt install -yq openvpn openvpn-systemd-resolved
          echo "${{ secrets.VPN_CONFIG }}" > ../vpn_config.ovpn

          sudo openvpn --config ../vpn_config.ovpn --daemon

          echo "Waiting for VPN connection..."

          for i in {1..15}; do
            if ip a | grep -q "tun0"; then
              echo "VPN connected successfully!"
              exit 0
            fi
            echo "Waiting for VPN to establish (attempt $i)..."
            sleep 1
          done

          echo "Failed to connect to VPN."
          exit 1

      - name: Run Ansible for all matched files
        env:
          PLAYBOOKS_PATH: ${{ inputs.PLAYBOOKS_PATH }}
          PLAYBOOK_NAME: ${{ inputs.PLAYBOOK_NAME }}
          FOLDER: ${{ inputs.FOLDER }}
        run: |
          echo "Looking for playbook $PLAYBOOK_NAME under $FOLDER in parent folder $PLAYBOOKS_PATH"

          MATCHED_FILES=$(find $PLAYBOOKS_PATH | grep "$FOLDER" | grep "$PLAYBOOK_NAME")

          echo "$MATCHED_FILES"

          if [ -z "$MATCHED_FILES" ]; then
            echo "No matching files found."

            exit 1
          fi

          for FILE in $MATCHED_FILES; do
            echo "Running ansible-playbook for $FILE"

            cd $(dirname "$FILE")

            ansible-playbook --diff --private-key="~/.ssh/id_rsa" "$(basename $FILE)"

            cd "$(git rev-parse --show-toplevel)"
          done

      - name: Create PR
        if: ${{ !cancelled() }}
        uses: peter-evans/create-pull-request@v7
        with:
          assignees: ${{ github.actor }}
          body: Ansible synchronization playbook '${{ inputs.PLAYBOOK_NAME }}' result
          sign-commits: true
          branch: sync/ansible-run
          branch-suffix: random
          commit-message: 'sync(ansible): run ${{ inputs.PLAYBOOK_NAME }}'
