name: Resuable issue management

on:
  workflow_call:
    inputs:
      retries:
        type: number
        required: false
        default: 3
      projectNumber:
        type: number
        required: true
      appId:
        type: string
        required: true
    secrets:
      appSecret:
        required: true

jobs:
  run:
    name: Check issue dates
    runs-on: ubuntu-latest

    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ inputs.appId }}
          private-key: ${{ secrets.appSecret }}
          owner: ${{ github.repository_owner }}

      - name: Get project ID
        id: fetch_project_id
        uses: actions/github-script@v7
        with:
          retries: ${{ inputs.retries }}
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const projectNumber = ${{ inputs.projectNumber }};
            const org = context.repo.owner;

            const query = `
              query ($org: String!, $projectNumber: Int!) {
                organization(login: $org) {
                  projectV2(number: $projectNumber) {
                    id
                  }
                }
              }
            `;

            const result = await github.graphql(query, {
              org,
              projectNumber,
            });

            console.log('Project ID:', result.organization.projectV2.id);

            return result.organization.projectV2.id;

      - name: Get all project fields
        id: fetch_project_fields
        uses: actions/github-script@v7
        with:
          retries: ${{ inputs.retries }}
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const projectNumber = ${{ inputs.projectNumber }};
            const org = context.repo.owner;

            const query = `
              query ($org: String!, $projectNumber: Int!) {
                organization(login: $org) {
                  projectV2(number: $projectNumber) {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query, {
              org,
              projectNumber,
            });

            const fields = result.organization.projectV2.fields.nodes.filter((node) => node.id);
            console.log("Available fields:", fields);

            return fields;

      - name: Fetch issues from project
        id: fetch_project_items
        uses: actions/github-script@v7
        with:
          retries: ${{ inputs.retries }}
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const projectNumber = ${{ inputs.projectNumber }};
            const org = context.repo.owner;

            const projectFields = ${{ steps.fetch_project_fields.outputs.result }};
            const startDateFieldId = projectFields.find((field) => field.name.includes('Start'))?.id;
            const endDateFieldId = projectFields.find((field) => field.name.includes('Target'))?.id;
            const statusFieldId = projectFields.find((field) => field.name.includes('Status'))?.id;

            const items = [];

            let hasNextPage = true;
            let afterCursor = null;

            const query = `
              query ($org: String!, $projectNumber: Int!, $first: Int!, $after: String) {
                  organization(login: $org) {
                    projectV2(number: $projectNumber) {
                      items(first: $first, after: $after) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          id
                          content {
                            ... on Issue {
                              number
                              state
                              assignees(first: 3) {
                                nodes {
                                  login
                                }
                              }
                            }
                          }
                          startDate: fieldValueByName(name: "Start") {
                            ... on ProjectV2ItemFieldDateValue {
                              id
                              date
                            }
                          }
                          endDate: fieldValueByName(name: "Target") {
                            ... on ProjectV2ItemFieldDateValue {
                              date
                            }
                          }
                          status: fieldValueByName(name: "Status") {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
            `;

            while (hasNextPage) {
              const result = await github.graphql(query, {
                org,
                projectNumber,
                first: 100,
                after: afterCursor,
              });

              const projectItems = result.organization.projectV2.items;

              items.push(...projectItems.nodes
                .filter((node) => node.content?.state === 'OPEN')
                .map((node) => ({
                  id: node.id,
                  issue: {
                    number: node.content?.number ?? null,
                    assignees: node.content?.assignees?.nodes?.map((node) => node?.login) ?? [],
                  },
                  startDate: {
                    id: node.startDate?.id ?? startDateFieldId,
                    value: node.startDate?.date ?? null,
                  },
                  endDate: {
                    id: node.endDate?.id ?? endDateFieldId,
                    value: node.endDate?.date ?? null,
                  },
                  status: {
                    id: node.status?.id ?? statusFieldId,
                    value: node.status?.name ?? null,
                  },
                })))

              hasNextPage = projectItems.pageInfo.hasNextPage;
              afterCursor = projectItems.pageInfo.endCursor;
            }

            const finalResult = items.filter((item) => 
              !['Pool of Ideas', 'Obsolete', 'Postponed', 'Duplicate', 'Done', 'Duplicate', 'To release']
              .includes(item.status.value)
            );

            console.log('Result length:', finalResult.length);

            return finalResult;

      - name: Process and comment on overdue issues
        uses: actions/github-script@v7
        with:
          retries: ${{ inputs.retries }}
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const items = ${{ steps.fetch_project_items.outputs.result }};
            const today = new Date().toISOString().split('T')[0];

            console.log(`Today's date is ${today}`);
            console.log(`Found ${items.length} items in the project`);

            for (const item of items) {
              const { number: issueNumber, assignees } = item.issue;
              const { startDate, endDate, status } = item;
              const assigneesText = assignees.map((item) => `@${item}`).join(' ');

              console.log(`Processing issue #${issueNumber} with dates (start: ${startDate.value}, end: ${endDate.value}`);

              if (endDate.value && endDate.value < today) {
                console.log(`❗️❗❗️️Issue #${issueNumber} has an expired end date (${endDate.value}). Adding a comment... ❗️❗❗`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `🔔 ${assigneesText} таску планировали завершить до ${endDate.value}, а сегодня уже ${today}. Текущий статус - '${status.value}'. Обнови дату завершения задачи либо поменяй статус на актуальный`,
                });
              } else {
                console.log(`✅✅✅ Issue #${issueNumber} is within the timeline or doesn't have an end date ✅✅✅`);
              }
            }

      - name: Add "Start" date to tasks "In Progress"
        uses: actions/github-script@v7
        if: ${{ !cancelled() }}
        with:
          retries: ${{ inputs.retries }}
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const items = ${{ steps.fetch_project_items.outputs.result }};
            const today = new Date().toISOString().split('T')[0];
            const projectId = ${{ steps.fetch_project_id.outputs.result }};

            console.log(`Today's date is ${today}`);
            console.log(`Found ${items.length} items in the project`);

            const mutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: $value}) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

            for (const item of items) {
              const { number: issueNumber } = item.issue;
              const { startDate, endDate, status, id } = item;

              console.log(`Processing issue #${issueNumber}`);

              if (status.value === 'In Progress' && !startDate.value) {
                console.log(`❗️❗❗ ️Issue #${issueNumber} is 'In Progress' but missing Start date. Setting it to today (${today})... ❗️❗❗`);
                await github.graphql(mutation, {
                  projectId,
                  itemId: id,
                  fieldId: startDate.id,
                  value: { date: today },
                });
              }
            }

      - name: Check "Target" date for tasks "In progress"
        uses: actions/github-script@v7
        with:
          retries: ${{ inputs.retries }}
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const items = ${{ steps.fetch_project_items.outputs.result }};

            for (const item of items) {
              const { number: issueNumber, assignees } = item.issue;
              const { endDate, status } = item;

              const assigneesText = assignees.map((item) => `@${item}`).join(' ');

              console.log(`Processing issue #${issueNumber}`);

              if (status.value === 'In Progress' && !endDate.value) {
                console.log(`❗️❗❗ ️Issue #${issueNumber} is 'In Progress' but has no "Target" ❗️❗❗`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  body: `🔔 ${assigneesText} таска в статусе '${status.value}', а даты ее завершения нет. Необходимо добавить "Target".\n\n<details>\n\n![end-date-setting](https://github.com/rees46/development/blob/master/static/issue-manager/end-date-setting.png?raw=true)\n\n</details>`,
                });
              }
            }
