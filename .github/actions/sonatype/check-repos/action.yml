name: Check sonatype repos
description: get notifications, if there is an error - exit 1

inputs:
  repositoryIds:
    description: sonatype staging repository ids array, separated by ' '
    required: true
  sonataUsername:
    description: sonatype username
    required: true
  sonataPassword:
    description: sonatype password
    required: true

runs:
  using: composite

  steps:
    - name: Process request
      shell: bash
      run: |
        declare -a error_repos

        IFS=' ' read -r -a ids_array <<< "${{ inputs.repositoryIds }}"

        for id in "${ids_array[@]}"; do
          echo "Check $id repository"

          response=$(curl -s \
            -w "\n%{http_code}" \
            -X GET \
            -u "${{ inputs.sonataUsername }}":"${{ inputs.sonataPassword }}" \
            -H "Accept: application/json" \
            "https://s01.oss.sonatype.org/service/local/staging/repository/$id")

          if [ -z "$response" ]; then
            echo "No response received for repository $id"
            exit 1
          fi

          http_status=$(echo "$response" | tail -n 1)
          response_body=$(echo "$response" | sed '$d')

          if ! { [ "$http_status" -ge 200 ] && [ "$http_status" -lt 300 ]; }; then
            echo "Failed to get repository $id (Status: $http_status)"
            echo "$response"
            exit 1
          fi

          response_json=$(echo "$response_body" | jq .)
          notifications=$(echo "$response_json" | jq ".notifications")
          repository_uri=$(echo "$response_json" | jq ".repositoryURI")

          if [ "$notifications" -gt 0 ]; then
            error_repos+=("$id: $notifications notifications; $repository_uri")
          fi
        done

        if [ ${#error_repos[@]} -gt 0 ]; then
          echo "Errors occurred for the following repositories:"
          for error_repo in "${error_repos[@]}"; do
            echo "$error_repo"
          done
          exit 1
        fi

        exit 0
